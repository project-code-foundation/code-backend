### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Block {
  id: Int!
  lang: Language!
  source: String!
  type: BlockType!
}

input BlockCreateManyWithoutLessonInput {
  connect: [BlockWhereUniqueInput!]
  create: [BlockCreateWithoutLessonInput!]
}

input BlockCreateWithoutLessonInput {
  lang: Language!
  source: String!
  type: BlockType!
}

input BlockFilter {
  every: BlockWhereInput
  none: BlockWhereInput
  some: BlockWhereInput
}

input BlockScalarWhereInput {
  AND: [BlockScalarWhereInput!]
  id: IntFilter
  lang: Language
  NOT: [BlockScalarWhereInput!]
  OR: [BlockScalarWhereInput!]
  source: StringFilter
  type: BlockType
}

enum BlockType {
  Code
  Markdown
}

input BlockUpdateManyDataInput {
  id: Int
  lang: Language
  source: String
  type: BlockType
}

input BlockUpdateManyWithoutLessonInput {
  connect: [BlockWhereUniqueInput!]
  create: [BlockCreateWithoutLessonInput!]
  delete: [BlockWhereUniqueInput!]
  deleteMany: [BlockScalarWhereInput!]
  disconnect: [BlockWhereUniqueInput!]
  set: [BlockWhereUniqueInput!]
  update: [BlockUpdateWithWhereUniqueWithoutLessonInput!]
  updateMany: [BlockUpdateManyWithWhereNestedInput!]
  upsert: [BlockUpsertWithWhereUniqueWithoutLessonInput!]
}

input BlockUpdateManyWithWhereNestedInput {
  data: BlockUpdateManyDataInput!
  where: BlockScalarWhereInput!
}

input BlockUpdateWithoutLessonDataInput {
  id: Int
  lang: Language
  source: String
  type: BlockType
}

input BlockUpdateWithWhereUniqueWithoutLessonInput {
  data: BlockUpdateWithoutLessonDataInput!
  where: BlockWhereUniqueInput!
}

input BlockUpsertWithWhereUniqueWithoutLessonInput {
  create: BlockCreateWithoutLessonInput!
  update: BlockUpdateWithoutLessonDataInput!
  where: BlockWhereUniqueInput!
}

input BlockWhereInput {
  AND: [BlockWhereInput!]
  id: IntFilter
  lang: Language
  lesson: LessonWhereInput
  NOT: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  source: StringFilter
  type: BlockType
}

input BlockWhereUniqueInput {
  id: Int
}

type Course {
  id: Int!
  sections(after: Int, before: Int, first: Int, last: Int, skip: Int): [Section!]!
  title: String!
}

input CourseCreateInput {
  sections: SectionCreateManyWithoutCourseInput
  title: String!
}

input CourseCreateOneWithoutSectionsInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutSectionsInput
}

input CourseCreateWithoutSectionsInput {
  title: String!
}

input CourseUpdateInput {
  id: Int
  sections: SectionUpdateManyWithoutCourseInput
  title: String
}

input CourseUpdateOneWithoutSectionsInput {
  connect: CourseWhereUniqueInput
  create: CourseCreateWithoutSectionsInput
  delete: Boolean
  disconnect: Boolean
  update: CourseUpdateWithoutSectionsDataInput
  upsert: CourseUpsertWithoutSectionsInput
}

input CourseUpdateWithoutSectionsDataInput {
  id: Int
  title: String
}

input CourseUpsertWithoutSectionsInput {
  create: CourseCreateWithoutSectionsInput!
  update: CourseUpdateWithoutSectionsDataInput!
}

input CourseWhereInput {
  AND: [CourseWhereInput!]
  id: IntFilter
  NOT: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  sections: SectionFilter
  title: StringFilter
}

input CourseWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

enum Language {
  html
  js
  py
  text
}

type Lesson {
  blocks(after: Int, before: Int, first: Int, last: Int, skip: Int): [Block!]!
  id: Int!
  title: String!
}

input LessonCreateInput {
  blocks: BlockCreateManyWithoutLessonInput
  section: SectionCreateOneWithoutLessonsInput
  title: String!
}

input LessonCreateManyWithoutSectionInput {
  connect: [LessonWhereUniqueInput!]
  create: [LessonCreateWithoutSectionInput!]
}

input LessonCreateWithoutSectionInput {
  blocks: BlockCreateManyWithoutLessonInput
  title: String!
}

input LessonFilter {
  every: LessonWhereInput
  none: LessonWhereInput
  some: LessonWhereInput
}

input LessonScalarWhereInput {
  AND: [LessonScalarWhereInput!]
  blocks: BlockFilter
  id: IntFilter
  NOT: [LessonScalarWhereInput!]
  OR: [LessonScalarWhereInput!]
  title: StringFilter
}

input LessonUpdateInput {
  blocks: BlockUpdateManyWithoutLessonInput
  id: Int
  section: SectionUpdateOneWithoutLessonsInput
  title: String
}

input LessonUpdateManyDataInput {
  id: Int
  title: String
}

input LessonUpdateManyWithoutSectionInput {
  connect: [LessonWhereUniqueInput!]
  create: [LessonCreateWithoutSectionInput!]
  delete: [LessonWhereUniqueInput!]
  deleteMany: [LessonScalarWhereInput!]
  disconnect: [LessonWhereUniqueInput!]
  set: [LessonWhereUniqueInput!]
  update: [LessonUpdateWithWhereUniqueWithoutSectionInput!]
  updateMany: [LessonUpdateManyWithWhereNestedInput!]
  upsert: [LessonUpsertWithWhereUniqueWithoutSectionInput!]
}

input LessonUpdateManyWithWhereNestedInput {
  data: LessonUpdateManyDataInput!
  where: LessonScalarWhereInput!
}

input LessonUpdateWithoutSectionDataInput {
  blocks: BlockUpdateManyWithoutLessonInput
  id: Int
  title: String
}

input LessonUpdateWithWhereUniqueWithoutSectionInput {
  data: LessonUpdateWithoutSectionDataInput!
  where: LessonWhereUniqueInput!
}

input LessonUpsertWithWhereUniqueWithoutSectionInput {
  create: LessonCreateWithoutSectionInput!
  update: LessonUpdateWithoutSectionDataInput!
  where: LessonWhereUniqueInput!
}

input LessonWhereInput {
  AND: [LessonWhereInput!]
  blocks: BlockFilter
  id: IntFilter
  NOT: [LessonWhereInput!]
  OR: [LessonWhereInput!]
  section: SectionWhereInput
  title: StringFilter
}

input LessonWhereUniqueInput {
  id: Int
}

type Mutation {
  createOneCourse(data: CourseCreateInput!): Course!
  createOneLesson(data: LessonCreateInput!): Lesson!
  createOneSection(data: SectionCreateInput!): Section!
  createOneUser(data: UserCreateInput!): User!
  deleteOneCourse(where: CourseWhereUniqueInput!): Course
  deleteOneLesson(where: LessonWhereUniqueInput!): Lesson
  deleteOneSection(where: SectionWhereUniqueInput!): Section
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateOneCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateOneLesson(data: LessonUpdateInput!, where: LessonWhereUniqueInput!): Lesson
  updateOneSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

type Query {
  course(where: CourseWhereUniqueInput!): Course
  courses(after: Int, before: Int, first: Int, last: Int, skip: Int): [Course!]!
  user(where: UserWhereUniqueInput!): User
  users(after: Int, before: Int, first: Int, last: Int, skip: Int): [User!]!
}

type Section {
  id: Int!
  lessons(after: Int, before: Int, first: Int, last: Int, skip: Int): [Lesson!]!
  title: String!
}

input SectionCreateInput {
  course: CourseCreateOneWithoutSectionsInput
  lessons: LessonCreateManyWithoutSectionInput
  title: String!
}

input SectionCreateManyWithoutCourseInput {
  connect: [SectionWhereUniqueInput!]
  create: [SectionCreateWithoutCourseInput!]
}

input SectionCreateOneWithoutLessonsInput {
  connect: SectionWhereUniqueInput
  create: SectionCreateWithoutLessonsInput
}

input SectionCreateWithoutCourseInput {
  lessons: LessonCreateManyWithoutSectionInput
  title: String!
}

input SectionCreateWithoutLessonsInput {
  course: CourseCreateOneWithoutSectionsInput
  title: String!
}

input SectionFilter {
  every: SectionWhereInput
  none: SectionWhereInput
  some: SectionWhereInput
}

input SectionScalarWhereInput {
  AND: [SectionScalarWhereInput!]
  id: IntFilter
  lessons: LessonFilter
  NOT: [SectionScalarWhereInput!]
  OR: [SectionScalarWhereInput!]
  title: StringFilter
}

input SectionUpdateInput {
  course: CourseUpdateOneWithoutSectionsInput
  id: Int
  lessons: LessonUpdateManyWithoutSectionInput
  title: String
}

input SectionUpdateManyDataInput {
  id: Int
  title: String
}

input SectionUpdateManyWithoutCourseInput {
  connect: [SectionWhereUniqueInput!]
  create: [SectionCreateWithoutCourseInput!]
  delete: [SectionWhereUniqueInput!]
  deleteMany: [SectionScalarWhereInput!]
  disconnect: [SectionWhereUniqueInput!]
  set: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [SectionUpdateManyWithWhereNestedInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutCourseInput!]
}

input SectionUpdateManyWithWhereNestedInput {
  data: SectionUpdateManyDataInput!
  where: SectionScalarWhereInput!
}

input SectionUpdateOneWithoutLessonsInput {
  connect: SectionWhereUniqueInput
  create: SectionCreateWithoutLessonsInput
  delete: Boolean
  disconnect: Boolean
  update: SectionUpdateWithoutLessonsDataInput
  upsert: SectionUpsertWithoutLessonsInput
}

input SectionUpdateWithoutCourseDataInput {
  id: Int
  lessons: LessonUpdateManyWithoutSectionInput
  title: String
}

input SectionUpdateWithoutLessonsDataInput {
  course: CourseUpdateOneWithoutSectionsInput
  id: Int
  title: String
}

input SectionUpdateWithWhereUniqueWithoutCourseInput {
  data: SectionUpdateWithoutCourseDataInput!
  where: SectionWhereUniqueInput!
}

input SectionUpsertWithoutLessonsInput {
  create: SectionCreateWithoutLessonsInput!
  update: SectionUpdateWithoutLessonsDataInput!
}

input SectionUpsertWithWhereUniqueWithoutCourseInput {
  create: SectionCreateWithoutCourseInput!
  update: SectionUpdateWithoutCourseDataInput!
  where: SectionWhereUniqueInput!
}

input SectionWhereInput {
  AND: [SectionWhereInput!]
  course: CourseWhereInput
  id: IntFilter
  lessons: LessonFilter
  NOT: [SectionWhereInput!]
  OR: [SectionWhereInput!]
  title: StringFilter
}

input SectionWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  bio: String!
  email: String!
  id: Int!
  name: String!
}

input UserCreateInput {
  bio: String
  email: String!
  name: String!
}

input UserUpdateInput {
  bio: String
  email: String
  id: Int
  name: String
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
